/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eew.client;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

import java.net.URI;

public class EEWClient {
    private URI uri;
    private WebSocketClient webSocketClient;
    private EEWEventListener eewEventListener;
    private Intensity intensity;

    public EEWClient(URI uri) {
        this.uri = uri;
        webSocketClient = new WebSocketClient(this.uri) {
            @Override
            public void onOpen(ServerHandshake handshakedata) {
                if (eewEventListener != null)
                    eewEventListener.onOpen(handshakedata);
            }

            @Override
            public void onMessage(String message) {

                ObjectMapper mapper = new ObjectMapper();
                try {
                    JsonNode rootNode = mapper.readTree(message);
                    if (rootNode.get("result").get("message").asText().equals("データがありません")) {
                        System.out.println("No Data");
                    }else {
                        if (eewEventListener != null) {

                            EEWInfo info = new EEWInfo();

                            EEWInfo.Result result = new EEWInfo.Result();
                            result.setMessage(rootNode.get("result").get("message").asText());
                            result.setStatus(rootNode.get("result").get("status").asText());
                            result.setIs_auth(rootNode.get("result").get("is_auth").asBoolean());
                            info.setResult(result);

                            EEWInfo.Security security = new EEWInfo.Security();
                            security.setRealm(rootNode.get("security").get("realm").asText());
                            security.setHash(rootNode.get("security").get("hash").asText());
                            info.setSecurity(security);

                            info.setReport_time(rootNode.get("report_time").asText());
                            info.setRegion_code(rootNode.get("region_code").asText());
                            info.setRequest_time(rootNode.get("request_time").asText());
                            info.setRegion_name(rootNode.get("region_name").asText());
                            info.setLongitude(rootNode.get("longitude").asText());
                            info.setIs_cancel(rootNode.get("is_cancel").asBoolean());
                            info.setDepth(rootNode.get("depth").asText());
                            info.setCalcintensity(rootNode.get("calcintensity").asText());
                            info.setIs_final(rootNode.get("is_final").asBoolean());
                            info.setIs_training(rootNode.get("is_training").asBoolean());
                            info.setLatitude(rootNode.get("latitude").asText());
                            info.setOrigin_time(rootNode.get("origin_time").asText());
                            info.setMagunitude(rootNode.get("magunitude").asText());
                            info.setReport_num(rootNode.get("report_num").asText());
                            info.setRequest_hypo_type(rootNode.get("request_hypo_type").asText());
                            info.setReport_id(rootNode.get("report_id").asText());
                            info.setAlertflg(rootNode.get("alertflg").asText());

                            if (intensity != null){
                                double depth;
                                try {
                                    depth = Double.parseDouble(rootNode.get("depth").asText());
                                }catch (Exception e){
                                    depth = 1.0;
                                }
                                try {
                                    double _intensity = intensity.getInstr(
                                            Double.parseDouble(rootNode.get("magunitude").asText()),
                                            depth,

                                            Double.parseDouble(rootNode.get("latitude").asText()),
                                            Double.parseDouble(rootNode.get("longitude").asText())
                                    );
                                    _intensity = Math.round(_intensity);
                                    if (_intensity >= 0)
                                        info.setIntensity(String.valueOf(_intensity));
                                    else
                                        info.setIntensity("0.0");
                                }catch (Exception e){
                                    info.setIntensity("0.0");
                                }
                            }

                            eewEventListener.happen(info);
                        }
                    }

                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }

            }

            @Override
            public void onClose(int code, String reason, boolean remote) {
                if (eewEventListener != null)
                    eewEventListener.onClose(code, reason, remote);
            }

            @Override
            public void onError(Exception ex) {
                if (eewEventListener != null)
                    eewEventListener.onError(ex);
            }
        };
    }

    public void setEewEventListener(EEWEventListener eewEventListener) {
        this.eewEventListener = eewEventListener;
    }

    /**
     * 座標と地面のAVS30値をセットすると予測震度を計算します
     *
     * 震度計算は下記の計算式で導出しています
     * http://www.j-map.bosai.go.jp/j-map/result/tn_246/html/html/2-4-1.html
     *
     * 計算結果は「intensity」をKeyとしてJson形式で出力されます。
     *
     * 赤羽岩淵は
     * AVS: 142 (m/s)
     * 緯度: 35.783
     * 軽度: 139.722
     *
     * @param avs : AVS30値 AVS30は下記URL「表層地盤」→ 「30m平均S波速度」で求める http://www.j-shis.bosai.go.jp/map/
     * @param lat : 震度予測地点の緯度
     * @param lon : 震度予測地点の軽度
     */
    public void setHouseInfo(int avs, double lat, double lon) {
        intensity = new Intensity();
        intensity.setHouseCoordinate(lat, lon);
        intensity.setAvs(avs);
    }

    public void start() {
        webSocketClient.connect();
    }

    public void exit() {
        webSocketClient.close();
    }
}
